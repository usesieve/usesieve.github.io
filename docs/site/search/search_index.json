{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Sieve Documentation Sieve uses AI agents to perform fast, accurate data extraction from any format such as PDF, image, or video. Data can be seamlessly converted into text, tables, forms, or any other format compatible with your existing workflow. There are 2 options for using using Sieve: UI and API. UI is perfect for users who want to use a simple web interface to submit their requests, rather than writing code. The API is for engineers, developers, and other users who would like to access the product through code, providing the option to integrate Sieve into existing ETL pipelines. See our UI and API quick start guide to get started!","title":"Home"},{"location":"#welcome-to-sieve-documentation","text":"Sieve uses AI agents to perform fast, accurate data extraction from any format such as PDF, image, or video. Data can be seamlessly converted into text, tables, forms, or any other format compatible with your existing workflow. There are 2 options for using using Sieve: UI and API. UI is perfect for users who want to use a simple web interface to submit their requests, rather than writing code. The API is for engineers, developers, and other users who would like to access the product through code, providing the option to integrate Sieve into existing ETL pipelines. See our UI and API quick start guide to get started!","title":"Welcome to Sieve Documentation"},{"location":"api_guide/","text":"Sieve API Quick Start Guide This notebook demonstrates how to use the Sieve API to extract structured data from various document types. We'll cover three common use cases: Extracting data points from a PDF Analyzing financial documents with specific parameters Mapping credit card transactions to merchant stock tickers import requests import json import time # API configuration BASE_URL = 'https://api.usesieve.com' # Authentication credentials email = \"your.email@example.com\" password = \"your_password\" user_type = \"requester\" full_name = \"Tutorial User\" If you don't have an account yet, register one registration_response = requests.post(f\"{BASE_URL}/api/v1/auth/register\", json={ \"email\": email, \"password\": password, \"user_type\": user_type, \"full_name\": full_name }) registration_response.json() {'token': 'eyJhbGciOiAiUlMyNTYiLCAidHlwIjogIkpXVCIsICJraWQiOiAiOTQ0YmZiYzg4MTkwNjY3ZjgwMjllZDRiOWQ4OWZmNGMyMzM1YWY1NSJ9.eyJpc3MiOiAiNTAxNzY0MjgzMTM1LWNvbXB1dGVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCAic3ViIjogIjUwMTc2NDI4MzEzNS1jb21wdXRlQGRldmVsb3Blci5nc2VydmljZWFjY291bnQuY29tIiwgImF1ZCI6ICJodHRwczovL2lkZW50aXR5dG9vbGtpdC5nb29nbGVhcGlzLmNvbS9nb29nbGUuaWRlbnRpdHkuaWRlbnRpdHl0b29sa2l0LnYxLklkZW50aXR5VG9vbGtpdCIsICJ1aWQiOiAiN0tLZzA1MXU5c2ZOZEtlbzJFd2dqT3JHNkV4MiIsICJpYXQiOiAxNzM5OTgxODQ4LCAiZXhwIjogMTczOTk4NTQ0OH0.kiLTVP6SRJSbNJH1HQ3BtDKMNfOUneRWModCwz22O5B4wKMS51TmfJMUlgdAc6eFUB1Jbp2tQjb7fY3s4MOwl4TnV1UCQ18BH0-b3wJh6bad0DXtSKbTIADvKkvJtJupGxWf5ErCV3lw6XN9npz4cukngw_-YGrj4YXd97tPnMjZxXG6GPEwxGEF5keQjyLdO2e5T35tUGnXcI-TzNtLQUenyo_3LF31vAPwJl2Oz7f6mLpeejQPcwvmN1Pj9DggiUSiuQLPgB7njShcSlebiOwoEqW38X3UfcM0-03GGYdPuJuQ7THvbfks1HGFFQzqIMX4nHGF21rq3CymmqMHaw', 'user_id': '7KKg051u9sfNdKeo2EwgjOrG6Ex2', 'user_type': 'requester'} If you have an account, log in to get an authentication token login_result = requests.post(f\"{BASE_URL}/api/v1/auth/login\", json={ \"email\": email, \"password\": password }) if login_result.status_code == 200: print(\"Login successful!\") elif login_result.status_code != 200: print(\"Login failed. Check your credentials again.\") # Save the token for future API calls token = login_result.json().get('token') # Set the token in your header headers = { 'Authorization': f'Bearer {token}', 'Content-Type': 'application/json' } Login successful! Helper Functions Let's define some helper functions to interact with the API and check job status. def submit_job(document_type, content, metadata=None): url = f'{BASE_URL}/process' payload = { 'document_type': document_type, 'content': content, 'metadata': metadata or {} } response = requests.post(url, headers=headers, json=payload) response.raise_for_status() return response.json() def check_job_status(job_id): url = f'{BASE_URL}/status/{job_id}' response = requests.get(url, headers=headers) response.raise_for_status() return response.json() def wait_for_completion(job_id, max_attempts=30, delay=60): for _ in range(max_attempts): status = check_job_status(job_id) if status['status'] == 'completed': return status elif status['status'] == 'failed': raise Exception(f'Job failed: {status.get(\"error\", \"Unknown error\")}') time.sleep(delay) raise TimeoutError('Job did not complete within the expected time') Example 1: Extract Data from PDF Let's extract specific data points from a PDF document. response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={ \"document_type\": \"pdf\", \"metadata\": { \"url\": \"https://www.cecafe.com.br/site/wp-content/uploads/2023/03/CECAFE-Monthly-Coffee-Report-JANUARY-2025.pdf\", 'data_points': ['Coffee export volume in most recent period (USD)'] } }) response.raise_for_status() job_id = response.json().get(\"job_id\") print(\"job id: \", job_id) # # Wait for completion and get results # final_result = wait_for_completion(result['job_id']) # print(json.dumps(final_result, indent=2)) job id: t1mPRc2JtlCKYtia1uPg Check for results url = f'{BASE_URL}/api/v1/status/{job_id}' response = requests.get(url, headers=headers) response.raise_for_status() response.json() print(\"status:\", response.json().get(\"status\")) if response.json().get(\"status\") == \"completed\": print(\"response:\", response.json().get(\"ai_result\").get(\"result\")) status: completed response: {'Coffee export volume in most recent period (USD)': '1,315,849.2'} Example 2: Financial Document Analysis Extract specific financial data points from SEC filings or other financial documents. response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={ \"document_type\": \"sec\", \"content\": \"None\", \"metadata\": { 'ticker': 'AAPL', 'metrics': [\"geographic distribution of revenue\"] } }) response.raise_for_status() job_id = response.json().get(\"job_id\") print(\"job id: \", job_id) job id: 5pwVuIuEm3ybBvTBBHcx url = f'{BASE_URL}/api/v1/status/{job_id}' response = requests.get(url, headers=headers) response.raise_for_status() response.json() print(\"status:\", response.json().get(\"status\")) if response.json().get(\"status\") == \"completed\": print(\"response:\", response.json().get(\"ai_result\").get(\"result\")) status: completed response: {'revenue_by_geography': None} Example 3: Credit Card Transaction Mapping Map a credit card transaction description to a merchant's stock ticker. response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={ \"document_type\": \"credit_card\", \"metadata\" : { \"transaction\": \"WHOLEFDS MKT 10259 AUSTIN TX\", 'transaction_date': '2024-01-15', 'amount': 156.78, \"data_points\": [\"merchant stock ticker\"] } }) response.raise_for_status() job_id = response.json().get(\"job_id\") print(\"job id: \", job_id) job id: synGikSyt7Tpiag6S6OE # Wait for completion and get results final_result = wait_for_completion(result['job_id']) print(json.dumps(final_result, indent=2))","title":"API Quick Start Guide"},{"location":"api_guide/#sieve-api-quick-start-guide","text":"This notebook demonstrates how to use the Sieve API to extract structured data from various document types. We'll cover three common use cases: Extracting data points from a PDF Analyzing financial documents with specific parameters Mapping credit card transactions to merchant stock tickers import requests import json import time # API configuration BASE_URL = 'https://api.usesieve.com' # Authentication credentials email = \"your.email@example.com\" password = \"your_password\" user_type = \"requester\" full_name = \"Tutorial User\"","title":"Sieve API Quick Start Guide"},{"location":"api_guide/#if-you-dont-have-an-account-yet-register-one","text":"registration_response = requests.post(f\"{BASE_URL}/api/v1/auth/register\", json={ \"email\": email, \"password\": password, \"user_type\": user_type, \"full_name\": full_name }) registration_response.json() {'token': 'eyJhbGciOiAiUlMyNTYiLCAidHlwIjogIkpXVCIsICJraWQiOiAiOTQ0YmZiYzg4MTkwNjY3ZjgwMjllZDRiOWQ4OWZmNGMyMzM1YWY1NSJ9.eyJpc3MiOiAiNTAxNzY0MjgzMTM1LWNvbXB1dGVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCAic3ViIjogIjUwMTc2NDI4MzEzNS1jb21wdXRlQGRldmVsb3Blci5nc2VydmljZWFjY291bnQuY29tIiwgImF1ZCI6ICJodHRwczovL2lkZW50aXR5dG9vbGtpdC5nb29nbGVhcGlzLmNvbS9nb29nbGUuaWRlbnRpdHkuaWRlbnRpdHl0b29sa2l0LnYxLklkZW50aXR5VG9vbGtpdCIsICJ1aWQiOiAiN0tLZzA1MXU5c2ZOZEtlbzJFd2dqT3JHNkV4MiIsICJpYXQiOiAxNzM5OTgxODQ4LCAiZXhwIjogMTczOTk4NTQ0OH0.kiLTVP6SRJSbNJH1HQ3BtDKMNfOUneRWModCwz22O5B4wKMS51TmfJMUlgdAc6eFUB1Jbp2tQjb7fY3s4MOwl4TnV1UCQ18BH0-b3wJh6bad0DXtSKbTIADvKkvJtJupGxWf5ErCV3lw6XN9npz4cukngw_-YGrj4YXd97tPnMjZxXG6GPEwxGEF5keQjyLdO2e5T35tUGnXcI-TzNtLQUenyo_3LF31vAPwJl2Oz7f6mLpeejQPcwvmN1Pj9DggiUSiuQLPgB7njShcSlebiOwoEqW38X3UfcM0-03GGYdPuJuQ7THvbfks1HGFFQzqIMX4nHGF21rq3CymmqMHaw', 'user_id': '7KKg051u9sfNdKeo2EwgjOrG6Ex2', 'user_type': 'requester'}","title":"If you don't have an account yet, register one"},{"location":"api_guide/#if-you-have-an-account-log-in-to-get-an-authentication-token","text":"login_result = requests.post(f\"{BASE_URL}/api/v1/auth/login\", json={ \"email\": email, \"password\": password }) if login_result.status_code == 200: print(\"Login successful!\") elif login_result.status_code != 200: print(\"Login failed. Check your credentials again.\") # Save the token for future API calls token = login_result.json().get('token') # Set the token in your header headers = { 'Authorization': f'Bearer {token}', 'Content-Type': 'application/json' } Login successful!","title":"If you have an account, log in to get an authentication token"},{"location":"api_guide/#helper-functions","text":"Let's define some helper functions to interact with the API and check job status. def submit_job(document_type, content, metadata=None): url = f'{BASE_URL}/process' payload = { 'document_type': document_type, 'content': content, 'metadata': metadata or {} } response = requests.post(url, headers=headers, json=payload) response.raise_for_status() return response.json() def check_job_status(job_id): url = f'{BASE_URL}/status/{job_id}' response = requests.get(url, headers=headers) response.raise_for_status() return response.json() def wait_for_completion(job_id, max_attempts=30, delay=60): for _ in range(max_attempts): status = check_job_status(job_id) if status['status'] == 'completed': return status elif status['status'] == 'failed': raise Exception(f'Job failed: {status.get(\"error\", \"Unknown error\")}') time.sleep(delay) raise TimeoutError('Job did not complete within the expected time')","title":"Helper Functions"},{"location":"api_guide/#example-1-extract-data-from-pdf","text":"Let's extract specific data points from a PDF document. response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={ \"document_type\": \"pdf\", \"metadata\": { \"url\": \"https://www.cecafe.com.br/site/wp-content/uploads/2023/03/CECAFE-Monthly-Coffee-Report-JANUARY-2025.pdf\", 'data_points': ['Coffee export volume in most recent period (USD)'] } }) response.raise_for_status() job_id = response.json().get(\"job_id\") print(\"job id: \", job_id) # # Wait for completion and get results # final_result = wait_for_completion(result['job_id']) # print(json.dumps(final_result, indent=2)) job id: t1mPRc2JtlCKYtia1uPg","title":"Example 1: Extract Data from PDF"},{"location":"api_guide/#check-for-results","text":"url = f'{BASE_URL}/api/v1/status/{job_id}' response = requests.get(url, headers=headers) response.raise_for_status() response.json() print(\"status:\", response.json().get(\"status\")) if response.json().get(\"status\") == \"completed\": print(\"response:\", response.json().get(\"ai_result\").get(\"result\")) status: completed response: {'Coffee export volume in most recent period (USD)': '1,315,849.2'}","title":"Check for results"},{"location":"api_guide/#example-2-financial-document-analysis","text":"Extract specific financial data points from SEC filings or other financial documents. response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={ \"document_type\": \"sec\", \"content\": \"None\", \"metadata\": { 'ticker': 'AAPL', 'metrics': [\"geographic distribution of revenue\"] } }) response.raise_for_status() job_id = response.json().get(\"job_id\") print(\"job id: \", job_id) job id: 5pwVuIuEm3ybBvTBBHcx url = f'{BASE_URL}/api/v1/status/{job_id}' response = requests.get(url, headers=headers) response.raise_for_status() response.json() print(\"status:\", response.json().get(\"status\")) if response.json().get(\"status\") == \"completed\": print(\"response:\", response.json().get(\"ai_result\").get(\"result\")) status: completed response: {'revenue_by_geography': None}","title":"Example 2: Financial Document Analysis"},{"location":"api_guide/#example-3-credit-card-transaction-mapping","text":"Map a credit card transaction description to a merchant's stock ticker. response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={ \"document_type\": \"credit_card\", \"metadata\" : { \"transaction\": \"WHOLEFDS MKT 10259 AUSTIN TX\", 'transaction_date': '2024-01-15', 'amount': 156.78, \"data_points\": [\"merchant stock ticker\"] } }) response.raise_for_status() job_id = response.json().get(\"job_id\") print(\"job id: \", job_id) job id: synGikSyt7Tpiag6S6OE # Wait for completion and get results final_result = wait_for_completion(result['job_id']) print(json.dumps(final_result, indent=2))","title":"Example 3: Credit Card Transaction Mapping"},{"location":"ui_guide/","text":"Sieve UI Quick Start Guide This document demonstrates how we can use Sieve's simple UI to extract structured data from various document types. We'll cover how to register, login, and perform a data request. We will cover an example use case which requests a data point from a PDF document, using Nvidia's latest 10-K report as an example. If you don't have an account yet, register one In your browser, navigate to app.usesieve.com, then click on the Register tab. You should see the following screen. Enter your preferred email, password, and full name. Under User Type make sure you select requester so you can submit data augmentation requests. See example below. Log in to access the UI If you have registered, click on the Login tab and enter your username and password that you have registered. Click the Login button to access the product. After you have logged in, you should see the following screen: Extract Data From PDF--Nvidia 10-K Submit Request Now you are ready to start using Sieve! Let's extract specific data points from a PDF document. In this example, we will extract gaming revenue from Nvidia's 10k report for the fiscal year ending January 26, 2025. To sumbit this request, we will leave \"Document Type\" set to pdf . Paste Nvidia's 10-K URL, shown below, into the PDF URL field. https://s201.q4cdn.com/141608511/files/doc_financials/2025/q4/177440d5-3b32-4185-8cc8-95500a9dc783.pdf Under Data Points to Extract, add the text Gaming Revenue for year ending Jan 26, 2025 in USD . Click Submit. You should see the page load for a few seconds before it confirms that the document has been submitted for processing. The example request is shown below. Get result Now that you have submitted a request, the data point is being identified by AI and validated by data professionals. You can watch for your result by clicking on the Request Hisory tab and pressing the Refresh button. Once the data has been retrieved, the status will be updated to complete and the data will be available under Results.","title":"UI Quick Start Guide"},{"location":"ui_guide/#sieve-ui-quick-start-guide","text":"This document demonstrates how we can use Sieve's simple UI to extract structured data from various document types. We'll cover how to register, login, and perform a data request. We will cover an example use case which requests a data point from a PDF document, using Nvidia's latest 10-K report as an example.","title":"Sieve UI Quick Start Guide"},{"location":"ui_guide/#if-you-dont-have-an-account-yet-register-one","text":"In your browser, navigate to app.usesieve.com, then click on the Register tab. You should see the following screen. Enter your preferred email, password, and full name. Under User Type make sure you select requester so you can submit data augmentation requests. See example below.","title":"If you don't have an account yet, register one"},{"location":"ui_guide/#log-in-to-access-the-ui","text":"If you have registered, click on the Login tab and enter your username and password that you have registered. Click the Login button to access the product. After you have logged in, you should see the following screen:","title":"Log in to access the UI"},{"location":"ui_guide/#extract-data-from-pdf-nvidia-10-k","text":"","title":"Extract Data From PDF--Nvidia 10-K"},{"location":"ui_guide/#submit-request","text":"Now you are ready to start using Sieve! Let's extract specific data points from a PDF document. In this example, we will extract gaming revenue from Nvidia's 10k report for the fiscal year ending January 26, 2025. To sumbit this request, we will leave \"Document Type\" set to pdf . Paste Nvidia's 10-K URL, shown below, into the PDF URL field. https://s201.q4cdn.com/141608511/files/doc_financials/2025/q4/177440d5-3b32-4185-8cc8-95500a9dc783.pdf Under Data Points to Extract, add the text Gaming Revenue for year ending Jan 26, 2025 in USD . Click Submit. You should see the page load for a few seconds before it confirms that the document has been submitted for processing. The example request is shown below.","title":"Submit Request"},{"location":"ui_guide/#get-result","text":"Now that you have submitted a request, the data point is being identified by AI and validated by data professionals. You can watch for your result by clicking on the Request Hisory tab and pressing the Refresh button. Once the data has been retrieved, the status will be updated to complete and the data will be available under Results.","title":"Get result"}]}